/*   
 *   CATMA Computer Aided Text Markup and Analysis
 *   
 *   Copyright (C) 2009-2013  University Of Hamburg
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.catma.indexer.db.model;

// Generated 09.05.2012 15:49:49 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;

import de.catma.util.IDGenerator;

/**
 * Tagreference generated by hbm2java
 */
@Entity
@Table(name = "tagreference", catalog = "CatmaIndex")
public class DBIndexTagReference implements java.io.Serializable {

	public static final String TABLENAME = "CatmaIndex.tagreference";
	private Integer tagReferenceId;
	private String documentId;
	private String userMarkupCollectionId;
	private String tagDefinitionPath;
	private byte[] tagDefinitionId;
	private String tagDefinitionVersion;
	private byte[] tagInstanceId;
	private int characterStart;
	private int characterEnd;
	private String catmaTagDefinitionId;
	private String catmaTagInstanceId;
	
	public DBIndexTagReference() {
	}

	public DBIndexTagReference(String documentId, String userMarkupCollectionId,
			String tagDefinitionPath, byte[] tagDefinitionId, 
			String tagDefinitionVersion,
			byte[] tagInstanceId, int characterStart, int characterEnd) {
		this.documentId = documentId;
		this.userMarkupCollectionId = userMarkupCollectionId;
		this.tagDefinitionPath = tagDefinitionPath;
		setTagDefinitionId(tagDefinitionId);
		this.tagDefinitionVersion = tagDefinitionVersion;
		setTagInstanceId(tagInstanceId);
		this.characterStart = characterStart;
		this.characterEnd = characterEnd;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "tagReferenceID", unique = true, nullable = false)
	public Integer getTagReferenceId() {
		return this.tagReferenceId;
	}

	public void setTagReferenceId(Integer tagReferenceId) {
		this.tagReferenceId = tagReferenceId;
	}

	@Column(name = "tagDefinitionVersion", nullable = false, length = 28)
	public String getTagDefinitionVersion() {
		return this.tagDefinitionVersion;
	}

	public void setTagDefinitionVersion(String tagDefinitionVersion) {
		this.tagDefinitionVersion = tagDefinitionVersion;
	}

	@Column(name = "documentID", nullable = false, length = 300)
	public String getDocumentId() {
		return this.documentId;
	}

	public void setDocumentId(String documentId) {
		this.documentId = documentId;
	}

	@Column(name = "userMarkupCollectionID", nullable = false, length = 300)
	public String getUserMarkupCollectionId() {
		return this.userMarkupCollectionId;
	}

	public void setUserMarkupCollectionId(String userMarkupColletionId) {
		this.userMarkupCollectionId = userMarkupColletionId;
	}

	@Column(name = "tagDefinitionPath", nullable = false, length = 2048)
	public String getTagDefinitionPath() {
		return this.tagDefinitionPath;
	}

	public void setTagDefinitionPath(String tagDefinitionPath) {
		this.tagDefinitionPath = tagDefinitionPath;
	}

	@Column(name = "tagDefinitionID", nullable = false)
	public byte[] getTagDefinitionId() {
		return this.tagDefinitionId;
	}

	public void setTagDefinitionId(byte[] tagDefintionId) {
		this.tagDefinitionId = tagDefintionId;
		IDGenerator idGenerator = new IDGenerator();
		setCatmaTagDefinitionId(idGenerator.uuidBytesToCatmaID(tagDefintionId));
	}

	@Column(name = "tagInstanceID", nullable = false)
	public byte[] getTagInstanceId() {
		return this.tagInstanceId;
	}

	public void setTagInstanceId(byte[] tagInstanceId) {
		this.tagInstanceId = tagInstanceId;
		IDGenerator idGenerator = new IDGenerator();
		setCatmaTagInstanceId(idGenerator.uuidBytesToCatmaID(tagInstanceId));
	}

	@Column(name = "characterStart", nullable = false)
	public int getCharacterStart() {
		return this.characterStart;
	}

	public void setCharacterStart(int characterStart) {
		this.characterStart = characterStart;
	}

	@Column(name = "characterEnd", nullable = false)
	public int getCharacterEnd() {
		return this.characterEnd;
	}

	public void setCharacterEnd(int characterEnd) {
		this.characterEnd = characterEnd;
	}

	@Transient
	public String getCatmaTagDefinitionId() {
		return catmaTagDefinitionId;
	}
	
	@Transient
	public String getCatmaTagInstanceId() {
		return catmaTagInstanceId;
	}
	
	public void setCatmaTagDefinitionId(String catmaTagDefinitionId) {
		this.catmaTagDefinitionId = catmaTagDefinitionId;
	}
	
	public void setCatmaTagInstanceId(String catmaTagInstanceId) {
		this.catmaTagInstanceId = catmaTagInstanceId;
	}

}
