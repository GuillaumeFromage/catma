package de.catma.repository.db.model;

// Generated 22.05.2012 21:58:37 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

/**
 * Taginstance generated by hbm2java
 */
@Entity
@Table(name = "taginstance", catalog = "CatmaRepository", uniqueConstraints = @UniqueConstraint(columnNames = "uuid"))
public class DBTagInstance implements java.io.Serializable {

	private Integer tagInstanceId;
	private byte[] uuid;
	private DBTagDefinition dbTagDefinition;
	private Set<DBTagReference> dbTagReferences = new HashSet<DBTagReference>();
	private Set<DBProperty> dbProperties = new HashSet<DBProperty>();

	public DBTagInstance() {
	}
	
	public DBTagInstance(byte[] uuid, DBTagDefinition dbTagDefinition) {
		this.uuid = uuid;
		this.dbTagDefinition = dbTagDefinition;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "tagInstanceID", unique = true, nullable = false)
	public Integer getTagInstanceId() {
		return this.tagInstanceId;
	}

	public void setTagInstanceId(Integer tagInstanceId) {
		this.tagInstanceId = tagInstanceId;
	}

	@Column(name = "uuid", unique = true, nullable = false)
	public byte[] getUuid() {
		return this.uuid;
	}

	public void setUuid(byte[] uuid) {
		this.uuid = uuid;
	}

	@ManyToOne
	@JoinColumn(name = "tagDefinitionID", nullable = false)
	public DBTagDefinition getDbTagDefinition() {
		return dbTagDefinition;
	}
	
	public void setDbTagDefinition(DBTagDefinition dbTagDefinition) {
		this.dbTagDefinition = dbTagDefinition;
	}
	
	@OneToMany(mappedBy = "dbTagInstance")
	@Cascade({CascadeType.SAVE_UPDATE, CascadeType.DELETE})
	public Set<DBTagReference> getDbTagReferences() {
		return dbTagReferences;
	}
	
	public void setDbTagReferences(Set<DBTagReference> dbTagReferences) {
		this.dbTagReferences = dbTagReferences;
	}
	
	@OneToMany(mappedBy = "dbTagInstance")
	@Cascade({CascadeType.SAVE_UPDATE, CascadeType.DELETE})
	public Set<DBProperty> getDbProperties() {
		return dbProperties;
	}
	
	public void setDbProperties(Set<DBProperty> dbProperties) {
		this.dbProperties = dbProperties;
	}

	public boolean hasProperty(DBPropertyDefinition authorPDef) {
		for (DBProperty dbProperty : dbProperties) {
			if (dbProperty.getDbPropertyDefinition().getPropertyDefinitionId() 
					== authorPDef.getPropertyDefinitionId()) {
				return true;
			}
		}
		return false;
	}

}
