package de.catma.repository.db.model;

// Generated 22.05.2012 21:58:37 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.io.IOException;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

import de.catma.document.source.SourceDocument;
import de.catma.document.source.SourceDocumentInfo;

/**
 * Sourcedocument generated by hbm2java
 */
@Entity
@Table(name = "sourcedocument", catalog = "CatmaRepository")
public class DBSourceDocument implements java.io.Serializable {

	private Integer sourceDocumentId;
	private String sourceUri;
	private Set<DBUserSourceDocument> dbUserSourceDocuments = 
			new HashSet<DBUserSourceDocument>();
	private Set<DBUserMarkupCollection> dbUserMarkupCollections = 
			new HashSet<DBUserMarkupCollection>();
	private String title;
	private String publisher;
	private String description;
	private String fileType;
	private String charset;
	private String fileOSType;
	private long checksum;
	private String mimeType;
	private String xsltDocumentLocalUri;
	private String locale;
	private String localUri;
	private String author;
	
	public DBSourceDocument() {
	}

	public DBSourceDocument(SourceDocument sourceDocument) {
		SourceDocumentInfo sourceDocumentInfo  = 
				sourceDocument.getSourceContentHandler().getSourceDocumentInfo();
				
		this.title = sourceDocumentInfo.getContentInfoSet().getTitle();
		this.publisher = sourceDocumentInfo.getContentInfoSet().getAuthor();
		this.description = sourceDocumentInfo.getContentInfoSet().getDescription();
		this.author = sourceDocumentInfo.getContentInfoSet().getAuthor();
		this.fileType = sourceDocumentInfo.getTechInfoSet().getFileType().name();
		this.charset = sourceDocumentInfo.getTechInfoSet().getCharset().toString();
		this.fileOSType = sourceDocumentInfo.getTechInfoSet().getFileOSType().name();
		this.checksum = sourceDocumentInfo.getTechInfoSet().getChecksum();
		this.mimeType = sourceDocumentInfo.getTechInfoSet().getMimeType();
		this.localUri = sourceDocument.getID();
		this.locale = sourceDocumentInfo.getIndexInfoSet().getLocale().toString();
		if (!sourceDocumentInfo.getTechInfoSet().getURI().getScheme().equals("file")) {
			this.sourceUri = sourceDocumentInfo.getTechInfoSet().getURI().toString();
		}
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "sourceDocumentID", unique = true, nullable = false)
	public Integer getSourceDocumentId() {
		return this.sourceDocumentId;
	}

	public void setSourceDocumentId(Integer sourceDocumentId) {
		this.sourceDocumentId = sourceDocumentId;
	}

	@Column(name = "title", length = 300)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "publisher", length = 300)
	public String getPublisher() {
		return publisher;
	}

	public void setPublisher(String publisher) {
		this.publisher = publisher;
	}

	@Column(name = "author", length = 300)
	public String getAuthor() {
		return this.author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	@Column(name = "description", length = 300)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "sourceUri", nullable = true, length = 300)
	public String getSourceUri() {
		return sourceUri;
	}

	public void setSourceUri(String sourceUri) throws URISyntaxException {
		this.sourceUri = sourceUri;
	}

	@Column(name = "fileType", nullable = false, length = 5)
	public String getFileType() {
		return this.fileType;
	}

	public void setFileType(String fileType) 
			throws IOException, InstantiationException, IllegalAccessException {
		this.fileType = fileType;
	}

	@Column(name = "charset", nullable = false, length = 50)
	public String getCharset() {
		return this.charset;
	}

	public void setCharset(String charset) {
		this.charset = charset;
	}

	@Column(name = "fileOSType", nullable = false, length = 15)
	public String getFileOstype() {
		return fileOSType;
	}

	public void setFileOstype(String fileOSType) {
		this.fileOSType = fileOSType;
	}

	@Column(name = "checksum", nullable = false)
	public long getChecksum() {
		return this.checksum;
	}

	public void setChecksum(long checksum) {
		this.checksum = checksum;
	}

	@Column(name = "mimeType", length = 45)
	public String getMimeType() {
		return this.mimeType;
	}

	public void setMimeType(String mimeType) {
		this.mimeType = mimeType;
	}

	@Column(name = "xsltDocumentLocalUri", length = 300)
	public String getXsltDocumentLocalUri() {
		return this.xsltDocumentLocalUri;
	}

	public void setXsltDocumentLocalUri(String xsltDocumentLocalUri) {
		this.xsltDocumentLocalUri = xsltDocumentLocalUri;
	}

	@Column(name = "locale", nullable = false, length = 15)
	public String getLocale() {
		return this.locale;
	}

	public void setLocale(String locale) {
		this.locale = locale;
	}

	@Column(name = "localUri", length = 300)
	public String getLocalUri() {
		return this.localUri;
	}

	public void setLocalUri(String localUri) {
		this.localUri = localUri;
	}
	
	@OneToMany(mappedBy = "dbSourceDocument")
	public Set<DBUserSourceDocument> getDbUserSourceDocuments() {
		return dbUserSourceDocuments;
	}
	
	public void setDbUserSourceDocuments(
			Set<DBUserSourceDocument> dbUserSourceDocuments) {
		this.dbUserSourceDocuments = dbUserSourceDocuments;
	}

	@OneToMany(mappedBy = "sourceDocumentId")
	public Set<DBUserMarkupCollection> getDbUserMarkupCollections() {
		return dbUserMarkupCollections;
	}
	
	public void setDbUserMarkupCollections(
			Set<DBUserMarkupCollection> dbUserMarkupCollections) {
		this.dbUserMarkupCollections = dbUserMarkupCollections;
	}
	@Override
	public String toString() {
		return getLocalUri() + " " + getTitle();
	}

	@Transient
	public String getId() {
		return (getSourceDocumentId() == null) ? null :
			String.valueOf(getSourceDocumentId());
	}
	
}
