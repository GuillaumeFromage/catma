/*   
 *   CATMA Computer Aided Text Markup and Analysis
 *   
 *   Copyright (C) 2009-2013  University Of Hamburg
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.catma.repository.db.model;

// Generated 23.05.2012 12:54:30 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;

import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

import de.catma.document.standoffmarkup.staticmarkup.StaticMarkupCollectionReference;
import de.catma.document.standoffmarkup.usermarkup.UserMarkupCollectionReference;

/**
 * Corpus generated by hbm2java
 */
@Entity
@Table(name = "corpus", catalog = "CatmaRepository")
public class DBCorpus implements java.io.Serializable {

	private Integer corpusId;
	private String name;
	private Set<DBUserCorpus> dbUserCorpus = new HashSet<DBUserCorpus>(0);
	private Set<DBCorpusSourceDocument> dbCorpusSourceDocuments = 
			new HashSet<DBCorpusSourceDocument>(0);
	private Set<DBCorpusUserMarkupCollection> dbCorpusUserMarkupCollections = 
			new HashSet<DBCorpusUserMarkupCollection>(0);
	private Set<DBCorpusStaticMarkupCollection> dbStaticMarkupCollections =
			new HashSet<DBCorpusStaticMarkupCollection>(0);

	public DBCorpus() {
	}

	public DBCorpus(String name) {
		this.name = name;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "corpusID", unique = true, nullable = false)
	public Integer getCorpusId() {
		return this.corpusId;
	}

	public void setCorpusId(Integer corpusId) {
		this.corpusId = corpusId;
	}

	@Column(name = "name", nullable = false, length = 45)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@OneToMany(mappedBy = "dbCorpus")
	@Cascade({CascadeType.DELETE, CascadeType.SAVE_UPDATE})
	public Set<DBUserCorpus> getDbUserCorpus() {
		return dbUserCorpus;
	}
	
	public void setDbUserCorpus(Set<DBUserCorpus> dbUserCorpus) {
		this.dbUserCorpus = dbUserCorpus;
	}
	
	@OneToMany(fetch=FetchType.EAGER)
	@JoinColumn(name="corpusID",  updatable = false)
	@Cascade({CascadeType.DELETE})
	public Set<DBCorpusSourceDocument> getDbCorpusSourceDocuments() {
		return dbCorpusSourceDocuments;
	}
	
	public void setDbCorpusSourceDocuments(
			Set<DBCorpusSourceDocument> dbCorpusSourceDocuments) {
		this.dbCorpusSourceDocuments = dbCorpusSourceDocuments;
	}
	
	@OneToMany(fetch=FetchType.EAGER)
	@JoinColumn(name="corpusID",  updatable = false)
	@Cascade({CascadeType.DELETE})
	public Set<DBCorpusUserMarkupCollection> getDbCorpusUserMarkupCollections() {
		return dbCorpusUserMarkupCollections;
	}
	
	public void setDbCorpusUserMarkupCollections(
			Set<DBCorpusUserMarkupCollection> dbCorpusUserMarkupCollections) {
		this.dbCorpusUserMarkupCollections = dbCorpusUserMarkupCollections;
	}
	
	@OneToMany(fetch=FetchType.EAGER)
	@JoinColumn(name="corpusID",  updatable = false)
	@Cascade({CascadeType.DELETE})
	public Set<DBCorpusStaticMarkupCollection> getDbStaticMarkupCollections() {
		return dbStaticMarkupCollections;
	}
	
	public void setDbStaticMarkupCollections(
			Set<DBCorpusStaticMarkupCollection> dbStaticMarkupCollections) {
		this.dbStaticMarkupCollections = dbStaticMarkupCollections;
	}

	public boolean contains(UserMarkupCollectionReference umcRef) {
		for (DBCorpusUserMarkupCollection dbUmcRef : getDbCorpusUserMarkupCollections()) {
			if (dbUmcRef.getUserMarkupCollectionId() == 
					Integer.valueOf(umcRef.getId())) {
				return true;
			}
		}
		return false;
	}

	public boolean contains(StaticMarkupCollectionReference smcRef) {
		for (DBCorpusStaticMarkupCollection dbSmcRef : getDbStaticMarkupCollections()) {
			if (dbSmcRef.getStaticMarkupCollectionId() == 
					Integer.valueOf(smcRef.getId())) {
				return true;
			}
		}
		return false;
	}
}
