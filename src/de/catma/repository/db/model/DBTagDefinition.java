/*   
 *   CATMA Computer Aided Text Markup and Analysis
 *   
 *   Copyright (C) 2009-2013  University Of Hamburg
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.catma.repository.db.model;

// Generated 22.05.2012 21:58:37 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

import de.catma.util.IDGenerator;

/**
 * Tagdefinition generated by hbm2java
 */
@Entity
@Table(name = "tagdefinition", catalog = "CatmaRepository", uniqueConstraints = @UniqueConstraint(columnNames = {
		"uuid", "tagsetDefinitionID" }))
public class DBTagDefinition implements java.io.Serializable {
	public static final String TABLE = "tagdefinition";
	
	private Integer tagDefinitionId;
	private Date version;
	private byte[] uuid;
	private String name;
	private DBTagsetDefinition dbTagsetDefinition;
	private Integer parentId;
	private byte[] parentUuid;
	private Set<DBTagDefinition> children;
	private Set<DBTagInstance> dbTagInstances  = new HashSet<DBTagInstance>();
	
	private Set<DBPropertyDefinition> dbPropertyDefinitions = 
			new HashSet<DBPropertyDefinition>();
	
	public DBTagDefinition() {
	}

	public DBTagDefinition(Integer tagDefinitionId) {
		this.tagDefinitionId = tagDefinitionId;
	}

	public DBTagDefinition(Date version, byte[] uuid,
			String name, DBTagsetDefinition dbTagsetDefinition,
			byte[] parentUuid) {
		this.version = version;
		this.uuid = uuid;
		this.name = name;
		this.dbTagsetDefinition = dbTagsetDefinition;
		this.parentUuid = parentUuid;
	}

	public DBTagDefinition(Date version, byte[] uuid, String name,
			DBTagsetDefinition dbTagsetDefinition, Integer parentId,
			byte[] parentUuid) {
		this(version, uuid, name, dbTagsetDefinition, parentUuid);
		this.parentId = parentId;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "tagDefinitionID", unique = true, nullable = false)
	public Integer getTagDefinitionId() {
		return this.tagDefinitionId;
	}

	public void setTagDefinitionId(Integer tagDefinitionId) {
		this.tagDefinitionId = tagDefinitionId;
	}

	@Column(name = "version", nullable = false, length = 19)
	public Date getVersion() {
		return this.version;
	}

	public void setVersion(Date version) {
		this.version = version;
	}

	@Column(name = "uuid", nullable = false)
	public byte[] getUuid() {
		return this.uuid;
	}

	public void setUuid(byte[] uuid) {
		this.uuid = uuid;
	}

	@Column(name = "name", nullable = false)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne
	@JoinColumn(name = "tagsetDefinitionID", nullable = false)
	public DBTagsetDefinition getDbTagsetDefinition() {
		return dbTagsetDefinition;
	}
	
	public void setDbTagsetDefinition(DBTagsetDefinition dbTagsetDefinition) {
		this.dbTagsetDefinition = dbTagsetDefinition;
	}

	@Column(name = "parentID")
	public Integer getParentId() {
		return this.parentId;
	}

	
	
	public void setParentId(Integer parentId) {
		this.parentId = parentId;
	}
	
	@Column(name = "parentUuid", nullable = false)
	public byte[] getParentUuid() {
		return this.parentUuid;
	}

	public void setParentUuid(byte[] parentUuid) {
		this.parentUuid = parentUuid;
	}

	@OneToMany(mappedBy ="dbTagDefinition")
	@Cascade({CascadeType.SAVE_UPDATE, CascadeType.DELETE})
	public Set<DBPropertyDefinition> getDbPropertyDefinitions() {
		return dbPropertyDefinitions;
	}
	
	public void setDbPropertyDefinitions(
			Set<DBPropertyDefinition> dbPropertyDefinitions) {
		this.dbPropertyDefinitions = dbPropertyDefinitions;
	}
	
	@OneToMany(mappedBy = "parentId", fetch=FetchType.LAZY)
	@Cascade({CascadeType.DELETE})
	public Set<DBTagDefinition> getChildren() {
		return children;
	}
	
	public void setChildren(Set<DBTagDefinition> children) {
		this.children = children;
	}
	
	@OneToMany(mappedBy = "dbTagDefinition")
	@Cascade({CascadeType.SAVE_UPDATE, CascadeType.DELETE})
	public Set<DBTagInstance> getDbTagInstances() {
		return dbTagInstances;
	}
	
	public void setDbTagInstances(Set<DBTagInstance> dbTagInstances) {
		this.dbTagInstances = dbTagInstances;
	}

	@Transient
	public DBPropertyDefinition getDbPropertyDefinition(String propertyDefUuid) {
		IDGenerator idGenerator = new IDGenerator();
		for (DBPropertyDefinition pd : getDbPropertyDefinitions()) {
			if (propertyDefUuid.equals(
					idGenerator.uuidBytesToCatmaID(pd.getUuid()))) {
				return pd;
			}
		}
		return null;
	}
	@Transient
	public DBPropertyDefinition getDbPropertyDefinition(Integer id) {
		for (DBPropertyDefinition pd : getDbPropertyDefinitions()) {
			if ((pd.getPropertyDefinitionId() != null) &&
					pd.getPropertyDefinitionId().equals(id)) {
				return pd;
			}
 		}
		return null;
	}
}
