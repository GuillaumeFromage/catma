package de.catma.repository.db.model;

// Generated 22.05.2012 21:58:37 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

/**
 * Propertydefinition generated by hbm2java
 */
@Entity
@Table(name = "propertydefinition", catalog = "CatmaRepository", uniqueConstraints = @UniqueConstraint(columnNames = "uuid"))
public class DBPropertyDefinition implements java.io.Serializable {

	private Integer propertyDefinitionId;
	private byte[] uuid;
	private String name;
	private DBTagDefinition dbTagDefinition;
	private boolean systemproperty;
	private Set<DBPropertyDefPossibleValue> dbPropertyDefPossibleValues = 
			new HashSet<DBPropertyDefPossibleValue>();
	private Set<DBProperty> dbProperties = new HashSet<DBProperty>();

	public DBPropertyDefinition() {
	}
	
	public DBPropertyDefinition(Integer propertyDefinitionId) {
		this.propertyDefinitionId = propertyDefinitionId;
	}

	public DBPropertyDefinition(byte[] uuid, String name,
			DBTagDefinition dbTagDefinition, boolean systemproperty) {
		this.uuid = uuid;
		this.name = name;
		this.dbTagDefinition = dbTagDefinition;
		this.systemproperty = systemproperty;
	}



	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "propertyDefinitionID", unique = true, nullable = false)
	public Integer getPropertyDefinitionId() {
		return this.propertyDefinitionId;
	}

	public void setPropertyDefinitionId(Integer propertyDefinitionId) {
		this.propertyDefinitionId = propertyDefinitionId;
	}

	@Column(name = "uuid", unique = true, nullable = false)
	public byte[] getUuid() {
		return this.uuid;
	}

	public void setUuid(byte[] uuid) {
		this.uuid = uuid;
	}

	@Column(name = "name", nullable = false, length = 45)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@ManyToOne
	@JoinColumn(name = "tagDefinitionID", nullable = false)
	@Cascade({CascadeType.SAVE_UPDATE})
	public DBTagDefinition getDbTagDefinition() {
		return dbTagDefinition;
	}
	
	public void setDbTagDefinition(DBTagDefinition dbTagDefinition) {
		this.dbTagDefinition = dbTagDefinition;
	}

	@Column(name = "systemproperty", nullable = false)
	public boolean isSystemproperty() {
		return this.systemproperty;
	}

	public void setSystemproperty(boolean systemproperty) {
		this.systemproperty = systemproperty;
	}
	
	@OneToMany(mappedBy = "dbPropertyDefinition")
	@Cascade({CascadeType.SAVE_UPDATE, CascadeType.DELETE})
	public Set<DBPropertyDefPossibleValue> getDbPropertyDefPossibleValues() {
		return dbPropertyDefPossibleValues;
	}
	
	public void setDbPropertyDefPossibleValues(
			Set<DBPropertyDefPossibleValue> dbPropertyDefPossibleValues) {
		this.dbPropertyDefPossibleValues = dbPropertyDefPossibleValues;
	}
	
	@OneToMany(mappedBy = "dbPropertyDefinition")
	@Cascade({CascadeType.SAVE_UPDATE, CascadeType.DELETE})
	public Set<DBProperty> getDbProperties() {
		return dbProperties;
	}
	
	public void setDbProperties(Set<DBProperty> dbProperties) {
		this.dbProperties = dbProperties;
	}
	
	public void setSingleValue(String value) {
		if (!dbPropertyDefPossibleValues.isEmpty()) {
			dbPropertyDefPossibleValues.iterator().next().setValue(value);
		}
		else {
			dbPropertyDefPossibleValues.add(
				new DBPropertyDefPossibleValue(value, this));
		}
	}

	public boolean hasValue(String value) {
		for (DBPropertyDefPossibleValue dbValue : getDbPropertyDefPossibleValues()) {
			if (dbValue.getValue().equals(value)) {
				return true;
			}
		}
		return false;
	}

}
