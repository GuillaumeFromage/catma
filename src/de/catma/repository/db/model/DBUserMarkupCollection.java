package de.catma.repository.db.model;

// Generated 22.05.2012 21:58:37 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

import de.catma.document.ContentInfoSet;
import de.catma.document.standoffmarkup.usermarkup.IUserMarkupCollection;
import de.catma.document.standoffmarkup.usermarkup.TagReference;
import de.catma.document.standoffmarkup.usermarkup.UserMarkupCollection;
import de.catma.tag.ITagLibrary;
import de.catma.tag.TagDefinition;
import de.catma.tag.TagInstance;
import de.catma.tag.TagsetDefinition;

/**
 * Usermarkupcollection generated by hbm2java
 */
@Entity
@Table(name = "usermarkupcollection", catalog = "CatmaRepository")
public class DBUserMarkupCollection implements java.io.Serializable, IUserMarkupCollection {

	private Integer usermarkupCollectionId;
	private int sourceDocumentId;
	private IUserMarkupCollection delegateUserMarkupCollection;
	private Set<DBUserUserMarkupCollection> dbUserUserMarkupCollections = 
			new HashSet<DBUserUserMarkupCollection>();
	private Set<DBTagReference> dbTagReferences = new HashSet<DBTagReference>();
	
	public DBUserMarkupCollection() {
		delegateUserMarkupCollection =
				new UserMarkupCollection(
						null, // gets filled out by setUsermarkupCollectionId
						new ContentInfoSet(),
						new DBTagLibrary(),
						new ArrayList<TagReference>());
	}
	
	public DBUserMarkupCollection(int sourceDocumentId, String title) {
		this.sourceDocumentId = sourceDocumentId;
		delegateUserMarkupCollection =
				new UserMarkupCollection(
						null, // gets filled out by setUsermarkupCollectionId
						new ContentInfoSet(title),
						new DBTagLibrary(title, false),
						new ArrayList<TagReference>());
	}
	
	public DBUserMarkupCollection(
			int sourceDocumentId,
			IUserMarkupCollection delegateUserMarkupCollection) {
		this.sourceDocumentId = sourceDocumentId;
		this.delegateUserMarkupCollection = delegateUserMarkupCollection;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "usermarkupCollectionID", unique = true, nullable = false)
	public Integer getUsermarkupCollectionId() {
		return this.usermarkupCollectionId;
	}

	public void setUsermarkupCollectionId(Integer usermarkupCollectionId) {
		this.usermarkupCollectionId = usermarkupCollectionId;
		delegateUserMarkupCollection.setId(usermarkupCollectionId.toString());
	}

	@Column(name = "title", length = 300)
	public String getTitle() {
		return delegateUserMarkupCollection.getContentInfoSet().getTitle();
	}

	public void setTitle(String title) {
		delegateUserMarkupCollection.getContentInfoSet().setTitle(title);
	}

	@Column(name = "publisher", length = 300)
	public String getPublisher() {
		return delegateUserMarkupCollection.getContentInfoSet().getPublisher();
	}

	public void setPublisher(String publisher) {
		delegateUserMarkupCollection.getContentInfoSet().setPublisher(publisher);
	}

	@Column(name = "author", length = 300)
	public String getAuthor() {
		return delegateUserMarkupCollection.getContentInfoSet().getAuthor();
	}

	public void setAuthor(String author) {
		delegateUserMarkupCollection.getContentInfoSet().setAuthor(author);
	}

	@Column(name = "description", length = 300)
	public String getDescription() {
		return delegateUserMarkupCollection.getContentInfoSet().getDescription();
	}

	public void setDescription(String description) {
		delegateUserMarkupCollection.getContentInfoSet().setDescription(description);
	}

	@Column(name = "sourceDocumentID", nullable = false)
	public int getSourceDocumentId() {
		return this.sourceDocumentId;
	}

	public void setSourceDocumentId(int sourceDocumentId) {
		this.sourceDocumentId = sourceDocumentId;
	}

	@OneToOne
	@Cascade({CascadeType.DELETE, CascadeType.SAVE_UPDATE})
	@JoinColumn(name = "tagLibraryID", nullable = false)
	public DBTagLibrary getTagLibrary() {
		return (DBTagLibrary)delegateUserMarkupCollection.getTagLibrary();
	}
	
	public void setTagLibrary(ITagLibrary tagLibrary) {
		delegateUserMarkupCollection.setTagLibrary(tagLibrary);
	}
	
	@OneToMany(mappedBy = "dbUserMarkupCollection")
	@Cascade({CascadeType.DELETE, CascadeType.SAVE_UPDATE})
	public Set<DBUserUserMarkupCollection> getDbUserUserMarkupCollections() {
		return dbUserUserMarkupCollections;
	}
	
	public void setDbUserUserMarkupCollections(
			Set<DBUserUserMarkupCollection> dbUserUserMarkupCollections) {
		this.dbUserUserMarkupCollections = dbUserUserMarkupCollections;
	}
	
	@OneToMany(mappedBy = "dbUserMarkupCollection")
	@Cascade({CascadeType.SAVE_UPDATE, CascadeType.DELETE})
	public Set<DBTagReference> getDbTagReferences() {
		return dbTagReferences;
	}
	
	public void setDbTagReferences(Set<DBTagReference> dbTagReferences) {
		this.dbTagReferences = dbTagReferences;
	}
	
	@Transient
	public List<TagReference> getTagReferences() {
		return delegateUserMarkupCollection.getTagReferences();
	}

	@Transient
	public List<TagReference> getTagReferences(TagDefinition tagDefinition) {
		return delegateUserMarkupCollection.getTagReferences(tagDefinition);
	}

	@Transient
	public List<TagReference> getTagReferences(TagDefinition tagDefinition,
			boolean withChildReferences) {
		return delegateUserMarkupCollection.getTagReferences(
				tagDefinition, withChildReferences);
	}

	@Transient
	public Set<String> getChildIDs(TagDefinition tagDefinition) {
		return delegateUserMarkupCollection.getChildIDs(tagDefinition);
	}

	@Transient
	public List<TagDefinition> getChildren(TagDefinition tagDefinition) {
		return delegateUserMarkupCollection.getChildren(tagDefinition);
	}

	public void update(TagsetDefinition tagsetDefinition) {
		delegateUserMarkupCollection.update(tagsetDefinition);
	}

	public void addTagReferences(List<TagReference> tagReferences) {
		delegateUserMarkupCollection.addTagReferences(tagReferences);
	}

	
	
	public void addTagReference(TagReference tagReference) {
		delegateUserMarkupCollection.addTagReference(tagReference);
	}

	@Transient
	public String getId() {
		return delegateUserMarkupCollection.getId();
	}

	@Transient
	public String getName() {
		return delegateUserMarkupCollection.getName();
	}

	@Transient
	public ContentInfoSet getContentInfoSet() {
		return delegateUserMarkupCollection.getContentInfoSet();
	}
	
	@Transient
	public boolean isEmpty() {
		return delegateUserMarkupCollection.isEmpty();
	}

	public String toString() {
		return delegateUserMarkupCollection.toString();
	}

	public boolean hasAccess(DBUser dbUser) {
		for (DBUserUserMarkupCollection uumc : getDbUserUserMarkupCollections()) {
			if (uumc.getDbUser().getUserId().equals(dbUser.getUserId())) {
				return true;
			}
		}
		return false;
	}

	public void setId(String id) {
		delegateUserMarkupCollection.setId(id);
	}

	public void synchronizeTagInstances(boolean withUserDefinedPropertyValues) {
		delegateUserMarkupCollection
				.synchronizeTagInstances(withUserDefinedPropertyValues);
	}

	public Set<TagReference> getTagReferences(TagInstance ti) {
		return delegateUserMarkupCollection.getTagReferences(ti);
	}
}
