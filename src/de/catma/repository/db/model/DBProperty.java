/*   
 *   CATMA Computer Aided Text Markup and Analysis
 *   
 *   Copyright (C) 2009-2013  University Of Hamburg
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.catma.repository.db.model;

// Generated 22.05.2012 21:58:37 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

/**
 * Property generated by hbm2java
 */
@Entity
@Table(name = "property", catalog = "CatmaRepository")
public class DBProperty implements java.io.Serializable {

	private int propertyId;
	private DBPropertyDefinition dbPropertyDefinition;
	private DBTagInstance dbTagInstance;
	private Set<DBPropertyValue> dbPropertyValues = new HashSet<DBPropertyValue>();

	public DBProperty() {
	}
	
	public DBProperty(DBPropertyDefinition dbPropertyDefinition,
			DBTagInstance dbTagInstance, String value) {
		this(dbPropertyDefinition, dbTagInstance);
		dbPropertyValues.add(new DBPropertyValue(this, value));
	}

	public DBProperty(
			DBPropertyDefinition dbPropertyDefinition, DBTagInstance dbTagInstance) {
		this.dbPropertyDefinition = dbPropertyDefinition;
		this.dbTagInstance = dbTagInstance;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "propertyID", unique = true, nullable = false)
	public int getPropertyId() {
		return this.propertyId;
	}

	public void setPropertyId(int propertyId) {
		this.propertyId = propertyId;
	}
	
	@ManyToOne
	@JoinColumn(name = "propertyDefinitionID", nullable = false)
	@Cascade({CascadeType.SAVE_UPDATE})
	public DBPropertyDefinition getDbPropertyDefinition() {
		return dbPropertyDefinition;
	}

	public void setDbPropertyDefinition(
			DBPropertyDefinition dbPropertyDefinition) {
		this.dbPropertyDefinition = dbPropertyDefinition;
	}

	@ManyToOne
	@JoinColumn(name = "tagInstanceID", nullable = false)
	@Cascade({CascadeType.SAVE_UPDATE})
	public DBTagInstance getDbTagInstance() {
		return dbTagInstance;
	}
	
	public void setDbTagInstance(DBTagInstance dbTagInstance) {
		this.dbTagInstance = dbTagInstance;
	}
	
	@OneToMany(mappedBy = "dbProperty")
	@Cascade({CascadeType.SAVE_UPDATE, CascadeType.DELETE})
	public Set<DBPropertyValue> getDbPropertyValues() {
		return dbPropertyValues;
	}
	
	public void setDbPropertyValues(Set<DBPropertyValue> dbPropertyValues) {
		this.dbPropertyValues = dbPropertyValues;
	}

	public boolean hasPropertyValue(String value) {
		for (DBPropertyValue dbPropValue : getDbPropertyValues()) {
			if (dbPropValue.getValue().equals(value)) {
				return true;
			}
		}
		return false;
	}
	
	@Transient
	public List<String> getPropertyValues() {
		ArrayList<String> values = new ArrayList<String>();
		for (DBPropertyValue val : getDbPropertyValues()) {
			values.add(val.getValue());
		}
		return values;
	}
}
