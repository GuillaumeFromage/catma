/*    *   CATMA Computer Aided Text Markup and Analysis *    *   Copyright (C) 2009-2013  University Of Hamburg * *   This program is free software: you can redistribute it and/or modify *   it under the terms of the GNU General Public License as published by *   the Free Software Foundation, either version 3 of the License, or *   (at your option) any later version. * *   This program is distributed in the hope that it will be useful, *   but WITHOUT ANY WARRANTY; without even the implied warranty of *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *   GNU General Public License for more details. * *   You should have received a copy of the GNU General Public License *   along with this program.  If not, see <http://www.gnu.org/licenses/>. */package de.catma.document.source;import java.io.IOException;import de.catma.document.Range;import de.catma.document.source.contenthandler.SourceContentHandler;/** * A source document is a sequence of text loaded and managed by a {@link SourceContentHandler}. * Markup can be attached to the source document. *  * @author marco.petris@web.de * @see SourceContentHandler * @see SourceDocumentHandler * @see de.catma.document.annotation.AnnotationCollection */public class SourceDocument {	private String uuid;	private SourceContentHandler sourceContentHandler;	private Integer length = null;	@Deprecated	private String revisionHash;		/**	 * @param uuid identifier for this document	 * @param handler the appropriate content handler	 * @see SourceDocumentHandler	 */	public SourceDocument(String uuid, SourceContentHandler handler) {		this.uuid = uuid;		this.sourceContentHandler = handler;	}	/**	 * displays title or id	 */	@Override	public String toString() {		String title = 				sourceContentHandler.getSourceDocumentInfo().getContentInfoSet().getTitle();		return ((title == null) || (title.isEmpty()))? uuid : title;	}	/**	 * @param range	 * @return the part of the content specified by range	 * @throws IOException error while accessing the content	 */	public String getContent( Range range ) throws IOException {		int length = getContent().length();		return getContent().substring(				Math.min(range.getStartPoint(), length), 				Math.min(range.getEndPoint(), length));	}		/**	 * @return the full text of this document	 * @throws IOException error while accessing the content	 */	public String getContent() throws IOException {		return sourceContentHandler.getContent();	}	/**	 * @return the identifier of this document, depending on the underlying repository	 */	public String getUuid() {		return uuid;	}		/**	 * @return the content handler of this document	 */	public SourceContentHandler getSourceContentHandler() {		return sourceContentHandler;	}	/**	 * @return length of the content of this document	 * @throws IOException error accessing the content	 */	public int getLength() throws IOException {		if (length == null) {			length = getContent().length();		}		return length;	}	@Deprecated	public String getRevisionHash() {		return this.revisionHash;	}	@Deprecated	public void setRevisionHash(String revisionHash) {		this.revisionHash = revisionHash;	}		/**	 * Unloads the content.	 */	public void unload() {		sourceContentHandler.unload();	}	/**	 * @return <code>true</code> if the content is loaded	 */	public boolean isLoaded() {		return sourceContentHandler.isLoaded();	}	/* (non-Javadoc)	 * @see java.lang.Object#hashCode()	 */	@Override	public int hashCode() {		final int prime = 31;		int result = 1;		result = prime * result + ((uuid == null) ? 0 : uuid.hashCode());		return result;	}	/* (non-Javadoc)	 * @see java.lang.Object#equals(java.lang.Object)	 */	@Override	public boolean equals(Object obj) {		if (this == obj) {			return true;		}		if (obj == null) {			return false;		}		if (getClass() != obj.getClass()) {			return false;		}		SourceDocument other = (SourceDocument) obj;		if (uuid == null) {			if (other.uuid != null) {				return false;			}		} else if (!uuid.equals(other.uuid)) {			return false;		}		return true;	}	public void setSourceContentHandler(SourceContentHandler sourceContentHandler) {		this.sourceContentHandler = sourceContentHandler;	}}